# Disables stone items
PFM::ItemDescriptor.define_on_creature_usability(Studio::StoneItem) do |item, creature|
  next false if creature.egg? || creature.shadow?

  next creature.evolve_check(:stone, item.db_symbol) && true # Party menu expect true, false or nil!
end

# Disables items like rare candies
PFM::ItemDescriptor.define_on_creature_usability(Studio::LevelIncreaseItem) do |_item, creature|
  next false if creature.egg? || creature.shadow?

  next (creature.level + 1) <= creature.max_level || creature.evolve_check(:level_up) != false
end

# Disables check for evolutions if pokemon is shadow
module PFM
  class Pokemon
    include Hooks
    # Check if the Pokemon can evolve and return the evolve id if possible
    # @param reason [Symbol] evolve check reason (:level_up, :trade, :stone)
    # @param extend_data [Hash, nil] extend_data generated by an item
    # @return [Array<Integer, nil>, false] if the Pokemon can evolve, the evolve id, otherwise false
    alias default_evolve_check evolve_check
    def evolve_check(reason = :level_up, extend_data = nil)
      return false if self.shadow?
      default_evolve_check(reason, extend_data)
    end
  end
end